def solve_sudoku(board):
  """
  Solves a Sudoku puzzle using backtracking algorithm.

  Args:
      board: A 2D list representing the initial Sudoku board configuration.
              Empty cells are represented by 0.

  Returns:
      A 2D list representing the solved Sudoku board, or None if no solution exists.
  """

  # Function to check if a number can be placed in a specific cell
  def is_safe(row, col, num):
    """
    Checks if placing 'num' in the cell at 'row' and 'col' is valid according to Sudoku rules.

    Args:
        row: Row index of the cell.
        col: Column index of the cell.
        num: The number to be placed.

    Returns:
        True if 'num' can be placed safely, False otherwise.
    """
    for i in range(9):
      # Check row and column for the same number
      if board[row][i] == num or board[i][col] == num:
        return False

    # Check subgrid for the same number (3x3 box)
    start_row = (row // 3) * 3
    start_col = (col // 3) * 3
    for i in range(3):
      for j in range(3):
        if board[start_row + i][start_col + j] == num:
          return False
    return True

  # Recursive function to solve the Sudoku board
  def solve(row, col):
    """
    Solves the Sudoku board recursively using backtracking.

    Args:
        row: Current row index.
        col: Current column index.

    Returns:
        True if the board is solved successfully, False otherwise.
    """
    # Base cases
    if row == 8 and col == 8:
      # If all cells are filled, the board is solved
      return True
    if col == 9:
      # Move to next row
      return solve(row + 1, 0)
    if board[row][col] != 0:
      # Skip filled cells
      return solve(row, col + 1)

    # Try all possible numbers for the current cell
    for num in range(1, 10):
      if is_safe(row, col, num):
        board[row][col] = num
        if solve(row, col + 1):
          return True
        board[row][col] = 0  # Backtrack if placement doesn't lead to solution

    # No valid number found for the current cell
    return False

  # Main function to start solving
  if solve(0, 0):
    return board
  else:
    return None

# Example usage
board = [
  [3, 0, 6, 5, 0, 8, 4, 0, 1],
  [5, 2, 8, 0, 0, 0, 0, 3, 7],
  [4, 0, 0, 7, 3, 0, 0, 1, 2],
  [6, 5, 0, 0, 0, 1, 2, 8, 0],
  [0, 0, 0, 0, 4, 0, 0, 0, 0],
  [0, 9, 0, 0, 0, 5, 3, 0, 6],
  [1, 8, 0, 0, 0, 7, 0, 0, 9],
  [0, 0, 2, 4, 0, 0, 0, 5, 3],
  [7, 0, 4, 3, 0, 6, 1, 2, 8]
]

solved_board = solve_sudoku(board)

if solved_board:
  # Print the solved Sudoku board
  for row in solved_board:
    print(row)
else:
  print("No solution found for the given Sudoku board.") 
