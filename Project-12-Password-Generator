import random
import string  # Import string module for predefined character sets

def generate_password(length, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):
    """
    Generates a random password based on user-specified criteria.
    
    Args:
        length (int): Desired length of the password.
        include_uppercase (bool, optional): Include uppercase letters (A-Z). Defaults to True.
        include_lowercase (bool, optional): Include lowercase letters (a-z). Defaults to True.
        include_numbers (bool, optional): Include numbers (0-9). Defaults to True.
        include_symbols (bool, optional): Include symbols (!@#$%^&*). Defaults to True.

    Returns:
        str: The generated random password.
    """

    # Define character sets based on user selection
    char_sets = []  # Initialize an empty list to store chosen character sets

    # Check if uppercase letters are to be included
    if include_uppercase:
        char_sets.append(string.ascii_uppercase)  # Add uppercase letters to the list

    # Check if lowercase letters are to be included
    if include_lowercase:
        char_sets.append(string.ascii_lowercase)  # Add lowercase letters to the list

    # Check if numbers are to be included
    if include_numbers:
        char_sets.append(string.digits)  # Add digits (0-9) to the list

    # Check if symbols are to be included
    if include_symbols:
        char_sets.append(string.punctuation)  # Add symbols to the list

    # Combine all selected character sets into one string
    all_chars = ''.join(char_sets)

    # Check if at least one character set is selected
    if not all_chars:
        raise ValueError("At least one character type must be selected.")  # Raise an error if no sets are selected

    # Generate the random password
    password = ''.join(random.choice(all_chars) for _ in range(length))  # Pick random characters from combined sets
    return password  # Return the generated password

# Example usage to demonstrate how the function works

# Get user input for password length
password_length = int(input("Enter desired password length: "))

# Get user preference for including uppercase letters
uppercase = input("Include uppercase letters (y/n)? ").lower() == 'y'

# Get user preference for including lowercase letters
lowercase = input("Include lowercase letters (y/n)? ").lower() == 'y'

# Get user preference for including numbers
numbers = input("Include numbers (y/n)? ").lower() == 'y'

# Get user preference for including symbols
symbols = input("Include symbols (y/n)? ").lower() == 'y'

# Try to generate the password based on user inputs and handle potential errors
try:
    # Generate the password using the provided criteria
    generated_password = generate_password(password_length, uppercase, lowercase, numbers, symbols)
    # Print the generated password
    print(f"Your generated password is: {generated_password}")
except ValueError as e:
    # Print error message if an exception occurs
    print(f"Error: {e}")
